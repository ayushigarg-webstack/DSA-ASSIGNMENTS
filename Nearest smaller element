#include <iostream>
using namespace std;



class Stack {
    int arr[MAX];
    int top;
public:
    Stack() { top = -1; }

    bool isEmpty() { return top == -1; }
    bool isFull() { return top == MAX - 1; }

    void push(int x) {
        if (isFull()) return;
        arr[++top] = x;
    }

    int pop() {
        if (isEmpty()) return -1;
        return arr[top--];
    }

    int peek() {
        if (isEmpty()) return -1;
        return arr[top];
    }
};

int main() {
    int n;
    cout << "Enter size of array: ";
    cin >> n;

    int A[n];
    cout << "Enter elements: ";
    for (int i = 0; i < n; i++)
        cin >> A[i];

    int result[n];
    Stack s;

    for (int i = 0; i < n; i++) {
        // Pop elements that are >= current
        while (!s.isEmpty() && s.peek() >= A[i])
            s.pop();

         
        if (s.isEmpty())
            result[i] = -1;
        else
            result[i] = s.peek();

        
        s.push(A[i]);
    }

    cout << "Nearest smaller elements: ";
    for (int i = 0; i < n; i++)
        cout << result[i] << " ";
    cout << endl;

    return 0;
}

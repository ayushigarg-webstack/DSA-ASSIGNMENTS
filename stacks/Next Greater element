#include <iostream>
using namespace std;

#define MAX 1000  // maximum size for stack

class Stack {
    int arr[MAX];
    int top;
public:
    Stack() { top = -1; }

    bool isEmpty() { return top == -1; }
    bool isFull() { return top == MAX - 1; }

    void push(int x) {
        if (!isFull())
            arr[++top] = x;
    }

    int pop() {
        if (!isEmpty())
            return arr[top--];
        return -1;
    }

    int peek() {
        if (!isEmpty())
            return arr[top];
        return -1;
    }
};

int main() {
    int n;
    cout << "Enter size of array: ";
    cin >> n;

    int arr[n];
    cout << "Enter elements: ";
    for (int i = 0; i < n; i++)
        cin >> arr[i];

    int result[n]; // to store next greater elements
    Stack s;

    // Traverse from right to left
    for (int i = n - 1; i >= 0; i--) {
        // Pop smaller or equal elements
        while (!s.isEmpty() && s.peek() <= arr[i])
            s.pop();

        // If stack becomes empty, no greater element to right
        if (s.isEmpty())
            result[i] = -1;
        else
            result[i] = s.peek();

        // Push current element into stack
        s.push(arr[i]);
    }

    cout << "Next Greater Elements:\n";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " -> " << result[i] << endl;

    return 0;
}
